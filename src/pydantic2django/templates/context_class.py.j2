"""
Context class for {{ model_name }}.
Generated automatically by pydantic2django.
"""
from dataclasses import dataclass, field
from typing import Any, Optional, Type

from django.db import models
from pydantic2django.context_storage import ModelContext, FieldContext
from {{ pydantic_module }} import {{ pydantic_class }}


@dataclass
class {{ model_name }}Context(ModelContext):
    """
    Context class for {{ model_name }}.
    Contains non-serializable fields that need to be provided when converting from Django to Pydantic.
    """
    model_name: str = "{{ model_name }}"
    pydantic_class: Type = {{ pydantic_class }}
    django_model: Type[models.Model] = None  # Will be set during model registration
    context_fields: list[FieldContext] = field(default_factory=list)

    def __post_init__(self):
        """Initialize context fields after instance creation."""
        {% for field in field_definitions %}
        self.add_field(
            field_name="{{ field.name }}",
            field_type={{ field.type }},
            is_optional={{ field.is_optional }},
            is_list={{ field.is_list }},
            additional_metadata={{ field.metadata }}
        )
        {% endfor %}

    @classmethod
    def create(cls, {% if field_definitions %}{% for field in field_definitions %}
        {{ field.name }}: {{ field.type }}{% if not loop.last %},{% endif %}{% endfor %}{% endif %}
    ) -> "{{ model_name }}Context":
        """
        Create a context instance with the required field values.

        Args:{% if field_definitions %}
{% for field in field_definitions %}            {{ field.name }}: Value for {{ field.name }} field
{% endfor %}{% endif %}
        Returns:
            A context instance with all required field values set
        """
        context = cls()
        {% for field in field_definitions %}
        context.set_value("{{ field.name }}", {{ field.name }})
        {% endfor %}
        return context
